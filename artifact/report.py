from argparse import ArgumentParser
from collections import defaultdict
from pathlib import Path
import matplotlib.pyplot as plt
import pandas as pd
import sys


def plot_graph(benchmarks, title='Benchmark', path='graph.png'):

    path = Path(path)
    figure_format = path.suffix[1:]

    plt.figure()
    for benchmark in benchmarks:
        benchmark = Path(benchmark)
        benchmark_name = benchmark.name
        coverage_csv = benchmark / 'coverage.csv'
        time, coverage = [], []
        with coverage_csv.open() as f:
            for line in f:
                t, c = line.split(',')
                time.append(int(t))
                coverage.append(int(c))
        plt.plot(time, coverage, label=benchmark_name)

    plt.title(title)
    plt.xlabel('Time (s)')
    plt.ylabel('Coverage')
    plt.legend(loc='lower right')
    plt.savefig(str(path), format=figure_format)
    plt.close()
    print(f'See "{str(path)}" to find the coverage graph.')


def make_table(benchmarks, name='Benchmark', path='table.md'):
    path = Path(path)
    bugs_per_benchmark = defaultdict(dict)
    for benchmark in benchmarks:
        benchmark = Path(benchmark)
        found_bugs_txt = benchmark / 'found_bugs.txt'
        with found_bugs_txt.open(encoding='UTF-8') as f:
            for line in f:
                _, tc, _, *bug = line.split()
                bug = ' '.join(bug)
                bugs_per_benchmark[benchmark.name][bug] = 'V'
    df = pd.DataFrame(bugs_per_benchmark)
    df = df.fillna('X')
    with path.open('w', encoding='UTF-8') as f:
        f.write(f'# Bug Table for {name}\n')
        f.write(df.to_markdown(colalign=('right', 'center', 'center')))
        f.write('\n')
    print(f'See "{str(path)}" to find the bug table.')


def main(*argv):
    parser = ArgumentParser()
    parser.add_argument('benchmarks', nargs='*', type=str, metavar='BENCHMARK',
                        help='directory generated by SymTuner')
    parser.add_argument('--name', default='Benchmark', type=str, metavar='STR',
                        help='name of benchmark (default=Benchmark)')
    parser.add_argument('--graph', default='coverage.pdf', type=str, metavar='PATH',
                        help='path to save coverage graph (default=coverage.pdf)')
    parser.add_argument('--table', default='bugs.md', type=str, metavar='PATH',
                        help='path to save bug table (default=bugs.md)')
    args = parser.parse_args(argv)

    # plot coverage graph
    plot_graph(args.benchmarks, args.name, args.graph)

    # make bug table
    table = args.table
    if not table.endswith('.md'):
        table = table + '.md'
    make_table(args.benchmarks, args.name, table)


if __name__ == '__main__':
    main(*sys.argv[1:])
